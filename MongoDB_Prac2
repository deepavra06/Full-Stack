// src/app.js
require('dotenv').config(); // Load environment variables from .env
const express = require('express');
const mongoose = require('mongoose');
const studentRoutes = require('./routes/studentRoutes'); // Import student routes

const app = express();
const PORT = process.env.PORT || 3000;
const MONGO_URI = process.env.MONGO_URI;

// Middleware
app.use(express.json()); // Allows the server to accept JSON body data

// 1. Database Connection
mongoose.connect(MONGO_URI)
  .then(() => console.log('✅ MongoDB connected successfully.'))
  .catch(err => {
    console.error('❌ MongoDB connection error:', err);
    process.exit(1); // Exit process with failure
  });


// 2. Default/Root Route (Serve your index.html)
app.get('/', (req, res) => {
  // Assuming your index.html is simple and can be sent directly
  res.sendFile('index.html', { root: __dirname + '/../' });
});

// 3. API Routes Integration (Connect /api/students to the controller)
// The API base path for our management system will be /api/students
app.use('/api/students', studentRoutes);


// Start Server
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
  console.log(`API Endpoints: http://localhost:${PORT}/api/students`);
});





// src/controllers/studentController.js
const Student = require('../models/Student');

// @desc    Get all students
// @route   GET /api/students
exports.getAllStudents = async (req, res) => {
  try {
    const students = await Student.find();
    res.status(200).json({ success: true, count: students.length, data: students });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Server Error: Could not fetch students' });
  }
};

// @desc    Create a new student
// @route   POST /api/students
exports.createStudent = async (req, res) => {
  try {
    const student = await Student.create(req.body);
    res.status(201).json({ success: true, data: student });
  } catch (error) {
    // Handle validation and other errors
    res.status(400).json({ success: false, error: error.message });
  }
};

// @desc    Update a student
// @route   PUT /api/students/:id
exports.updateStudent = async (req, res) => {
  try {
    const student = await Student.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });
    if (!student) {
      return res.status(404).json({ success: false, error: 'Student not found' });
    }
    res.status(200).json({ success: true, data: student });
  } catch (error) {
    res.status(400).json({ success: false, error: error.message });
  }
};

// @desc    Delete a student
// @route   DELETE /api/students/:id
exports.deleteStudent = async (req, res) => {
  try {
    const student = await Student.findByIdAndDelete(req.params.id);
    if (!student) {
      return res.status(404).json({ success: false, error: 'Student not found' });
    }
    res.status(200).json({ success: true, message: 'Student deleted successfully' });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Server Error' });
  }
};







// src/models/Student.js
const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Student name is required'],
    trim: true,
  },
  age: {
    type: Number,
    required: [true, 'Age is required'],
    min: 16,
  },
  course: {
    type: String,
    required: [true, 'Course is required'],
    enum: ['CS', 'Engineering', 'Arts', 'Science'],
  },
}, { timestamps: true });

const Student = mongoose.model('Student', studentSchema);

module.exports = Student;











// src/routes/studentRoutes.js
const express = require('express');
const {
  getAllStudents,
  createStudent,
  updateStudent,
  deleteStudent,
} = require('../controllers/studentController');

const router = express.Router();

// Routes for /api/students
router.route('/')
  .get(getAllStudents)   // GET all students
  .post(createStudent);  // POST a new student

// Routes for /api/students/:id
router.route('/:id')
  // .get(getStudentById) // Optional: add this if needed
  .put(updateStudent)    // PUT to update by ID
  .delete(deleteStudent);// DELETE by ID

module.exports = router;
