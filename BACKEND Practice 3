const express = require('express');
const router = express.Router();

const COLLECTION_NAME = "accounts";

// This function returns a router with the db connection passed in
module.exports = function(db) {

    // --- API Endpoint for Money Transfer ---
    router.post('/transfer', async (req, res) => {
        const { fromAccountId, toAccountId, amount } = req.body;
        const transferAmount = parseFloat(amount);

        // Basic input validation
        if (!fromAccountId || !toAccountId || isNaN(transferAmount) || transferAmount <= 0) {
            return res.status(400).json({
                status: "error",
                message: "Invalid request. Please provide 'fromAccountId', 'toAccountId', and a positive 'amount'."
            });
        }
        
        if (fromAccountId === toAccountId) {
            return res.status(400).json({
                status: "error",
                message: "Sender and receiver accounts cannot be the same."
            });
        }

        const accounts = db.collection(COLLECTION_NAME);

        try {
            // Step 1: Find both the sender and receiver accounts
            const fromAccount = await accounts.findOne({ accountId: fromAccountId });
            const toAccount = await accounts.findOne({ accountId: toAccountId });

            // Step 2: Validate that both accounts exist
            if (!fromAccount) {
                return res.status(404).json({ status: "error", message: `Sender account '${fromAccountId}' not found.` });
            }
            if (!toAccount) {
                return res.status(404).json({ status: "error", message: `Receiver account '${toAccountId}' not found.` });
            }

            // Step 3: Check if the sender has sufficient balance
            if (fromAccount.balance < transferAmount) {
                return res.status(400).json({ status: "error", message: "Insufficient funds." });
            }

            // Step 4: Perform the sequential balance updates
            await accounts.updateOne(
                { accountId: fromAccountId },
                { $inc: { balance: -transferAmount } }
            );
            
            await accounts.updateOne(
                { accountId: toAccountId },
                { $inc: { balance: transferAmount } }
            );
            
            // Step 5: Send success response
            console.log(`Transfer successful: ${transferAmount} from ${fromAccountId} to ${toAccountId}`);
            res.status(200).json({
                status: "success",
                message: "Transfer completed successfully.",
                data: {
                    from: fromAccountId,
                    to: toAccountId,
                    amount: transferAmount
                }
            });

        } catch (error) {
            console.error("An error occurred during the transfer:", error);
            res.status(500).json({ status: "error", message: "An internal server error occurred." });
        }
    });

    // --- API Endpoint to view all accounts (for testing) ---
    router.get('/accounts', async (req, res) => {
        try {
            const accounts = await db.collection(COLLECTION_NAME).find({}).toArray();
            res.status(200).json({ status: "success", data: accounts });
        } catch (error) {
            console.error("Failed to fetch accounts:", error);
            res.status(500).json({ status: "error", message: "Failed to fetch accounts." });
        }
    });

    return router;
};







const express = require('express');
const { MongoClient } = require('mongodb');
const apiRoutes = require('./routes/index');

const app = express();
app.use(express.json()); // Use the built-in JSON body parser

const PORT = process.env.PORT || 3000;
// --- IMPORTANT ---
// Replace this with your MongoDB connection string if needed.
const MONGO_URI = "mongodb://localhost:27017";
const DB_NAME = "accountTransferDB";
const COLLECTION_NAME = "accounts";

let db;

/**
 * Seeds the database with some sample accounts if they don't exist.
 * @param {Db} database - The database instance.
 */
async function seedDatabase(database) {
    const accountsCollection = database.collection(COLLECTION_NAME);
    try {
        const count = await accountsCollection.countDocuments();
        if (count === 0) {
            console.log("Seeding database with initial accounts...");
            await accountsCollection.insertMany([
                { user: "Alice", accountId: "acc_001", balance: 1000 },
                { user: "Bob", accountId: "acc_002", balance: 500 },
                { user: "Charlie", accountId: "acc_003", balance: 750 }
            ]);
            console.log("Database seeded successfully.");
        }
    } catch (error) {
        console.error("Error seeding database:", error);
    }
}


/**
 * Main function to connect to MongoDB and start the Express server.
 */
async function startServer() {
    try {
        const client = new MongoClient(MONGO_URI);
        await client.connect();
        console.log("Successfully connected to MongoDB.");
        db = client.db(DB_NAME);

        // Seed the database after successful connection
        await seedDatabase(db);

        // --- Use API Routes ---
        // We pass the db instance to our routes
        app.use('/', apiRoutes(db));

        app.listen(PORT, () => {
            console.log(`Server is running on http://localhost:${PORT}`);
        });
    } catch (error) {
        console.error("Failed to connect to MongoDB", error);
        process.exit(1); // Exit the process with an error code
    }
}

startServer();
