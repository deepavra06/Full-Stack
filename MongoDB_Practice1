// src/routes/index.js

const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();

// ------------------------------------------------------------------
// 1. PRODUCT SCHEMA AND MODEL (Mongoose)
// ------------------------------------------------------------------

const productSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, 'Product name is required.'],
        trim: true,
        unique: true
    },
    price: {
        type: Number,
        required: [true, 'Product price is required.'],
        min: [0, 'Price cannot be negative.']
    },
    category: {
        type: String,
        required: [true, 'Product category is required.'],
        enum: ['Electronics', 'Books', 'Apparel', 'Home Goods', 'Other'],
        default: 'Other'
    }
}, { timestamps: true });

const Product = mongoose.model('Product', productSchema);

// ------------------------------------------------------------------
// 2. CRUD ROUTE HANDLERS
// ------------------------------------------------------------------

// -------------------
// C: Create (Add a new product)
// POST /api/products
// -------------------
router.post('/products', async (req, res) => {
    try {
        const newProduct = new Product(req.body);
        const savedProduct = await newProduct.save();
        res.status(201).json(savedProduct);
    } catch (error) {
        if (error.name === 'ValidationError') {
            return res.status(400).json({ error: error.message });
        }
        // Handle Mongoose unique error (code 11000)
        if (error.code === 11000) {
            return res.status(400).json({ error: `Product with name '${req.body.name}' already exists.` });
        }
        res.status(500).json({ error: 'Server error while creating product.' });
    }
});

// -------------------
// R: Read (Retrieve all products)
// GET /api/products
// -------------------
router.get('/products', async (req, res) => {
    try {
        const products = await Product.find({});
        res.status(200).json(products);
    } catch (error) {
        res.status(500).json({ error: 'Server error while fetching products.' });
    }
});

// -------------------
// U: Update (Update a product by ID)
// PUT /api/products/:id
// -------------------
router.put('/products/:id', async (req, res) => {
    try {
        const product = await Product.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true, runValidators: true } // 'new: true' returns the updated doc, 'runValidators: true' enforces schema validation
        );

        if (!product) {
            return res.status(404).json({ error: 'Product not found.' });
        }
        res.status(200).json(product);
    } catch (error) {
        if (error.name === 'CastError') {
            return res.status(400).json({ error: `Invalid ID format: ${req.params.id}` });
        }
        if (error.name === 'ValidationError') {
            return res.status(400).json({ error: error.message });
        }
        res.status(500).json({ error: 'Server error while updating product.' });
    }
});

// -------------------
// D: Delete (Delete a product by ID)
// DELETE /api/products/:id
// -------------------
router.delete('/products/:id', async (req, res) => {
    try {
        const product = await Product.findByIdAndDelete(req.params.id);

        if (!product) {
            return res.status(404).json({ error: 'Product not found.' });
        }
        res.status(200).json({ message: 'Product successfully deleted.', product });
    } catch (error) {
        if (error.name === 'CastError') {
            return res.status(400).json({ error: `Invalid ID format: ${req.params.id}` });
        }
        res.status(500).json({ error: 'Server error while deleting product.' });
    }
});

module.exports = router;




// app.js

const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const apiRoutes = require('./src/routes/index.js');

// Load environment variables from .env file
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;
const MONGODB_URI = process.env.MONGODB_URI;

// Middleware
app.use(express.json()); // To parse JSON bodies from requests

// ------------------------------------------------------------------
// 1. MONGODB CONNECTION (Mongoose)
// ------------------------------------------------------------------
mongoose.connect(MONGODB_URI)
    .then(() => {
        console.log('✅ Connected to MongoDB successfully.');
    })
    .catch(err => {
        console.error('❌ MongoDB connection error:', err.message);
        // Optional: Exit process if DB connection fails critical for app functionality
        // process.exit(1); 
    });


// ------------------------------------------------------------------
// 2. ROUTES
// ------------------------------------------------------------------

// Basic root route for verification
app.get('/', (req, res) => {
    res.send('<h1>Product CRUD API is Running!</h1><p>Use /api/products for CRUD operations.</p>');
});

// Mount the product API routes
app.use('/api', apiRoutes); 

// Fallback for 404
app.use((req, res) => {
    res.status(404).send({ message: 'Route not found. Check your URL.' });
});

// ------------------------------------------------------------------
// 3. START SERVER
// ------------------------------------------------------------------
app.listen(PORT, () => {
    console.log(`🚀 Server is running on http://localhost:${PORT}`);
});

